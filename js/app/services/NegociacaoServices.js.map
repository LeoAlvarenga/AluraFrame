{"version":3,"sources":["../../app-es6/services/NegociacaoServices.js"],"names":["HttpServices","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","obj","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","adiciona","_mensagem","texto","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoServices.js","sourcesContent":["import { HttpServices } from \"./HttpServices\";\nimport { ConnectionFactory } from \"./ConnectionFactory\";\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\nimport { Negociacao } from \"../models/Negociacoes\";\n\nexport class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpServices();\n    }\n\n    obterNegociacoesDaSemana() {\n        //lendo as informações da api que está na pasta server\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/anterior').then(negociacoes => {\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n            }).catch(erro => {\n                console.log(erro);\n                reject('Não foi possível obter as negociações da semana anterior');\n            });\n        });\n\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/retrasada').then(negociacoes => {\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n            }).catch(erro => {\n                console.log(erro);\n                reject('Não foi possível obter as negociações da semana retrasada');\n            });\n        });\n\n    }\n    obterNegociacoes() {\n        \n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\t} \n\n    cadastra(negociacao) {\n\n        return ConnectionFactory.getConnection().then(connection => {\n\n            new NegociacaoDao(connection).adiciona(negociacao).then(() => {\n                this._mensagem.texto = \"Negociação adicionada com sucesso\";\n            }).catch(() => { throw new Error('Não foi possível adicionar a negociação') });\n        });\n\n    }\n\n    lista() {\n\n        return ConnectionFactory.getConnection().then((connection) => {\n            new NegociacaoDao(connection).listaTodos();\n        }\n        ).catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações');\n        });\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection().then(connection => {\n                new NegociacaoDao(connection).apagaTodos().then(() => {\n                    'Negociações apagadas com sucesso';\n                }\n                ).catch(erro => {\n                    console.log(erro);\n                    throw new Error(\"Não foi possível apagar as Negociações\");\n                })\n            });\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            })\n    }\n\n}\n"]}