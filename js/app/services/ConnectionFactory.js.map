{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStores","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQN,EAAEC,MAAF,CAASM,KAAjB;;AAEAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BALD;AAMH,yBA5BM,CAAP;AA6BH;;;kDAEoBrB,U,EAAY;;AAE7BH,+BAAOyB,OAAP,CAAe,iBAAS;;AAEpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEjDzB,uCAAW2B,kBAAX,CAA8BF,KAA9B,EAAqC,EAAEG,eAAe,IAAjB,EAArC;AACH,yBALD;AAOH;;;sDAEwB;;AAErB,4BAAG5B,UAAH,EAAe;AACXA,uCAAWC,KAAX;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\n    const stores = ['negociacoes'];\n    const version = 3;\n    const dbName = 'aluraframe';\n\n    var connection = null;\n\n    var close = null;\n\n    export class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n        static getConnection() {\n\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = () => {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n\n                    console(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n\n            stores.forEach(store => {\n\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStores(store, { autoIncrement: true });\n            });\n\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                connection.close();\n                connection = null;\n            }\n        }\n    }\n"]}