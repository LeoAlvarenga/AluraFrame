{"version":3,"sources":["../../app-es6/services/NegociacaoServices.js"],"names":["NegociacaoService","_http","HttpServices","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","obj","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","adiciona","_mensagem","texto","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoServices.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpServices();\n    }\n\n    obterNegociacoesDaSemana() {\n        //lendo as informações da api que está na pasta server\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/anterior').then(negociacoes => {\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n            }).catch(erro => {\n                console.log(erro);\n                reject('Não foi possível obter as negociações da semana anterior');\n            });\n        });\n\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/retrasada').then(negociacoes => {\n                resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n            }).catch(erro => {\n                console.log(erro);\n                reject('Não foi possível obter as negociações da semana retrasada');\n            });\n        });\n\n    }\n    obterNegociacoes() {\n        \n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n\t} \n\n    cadastra(negociacao) {\n\n        return ConnectionFactory.getConnection().then(connection => {\n\n            new NegociacaoDao(connection).adiciona(negociacao).then(() => {\n                this._mensagem.texto = \"Negociação adicionada com sucesso\";\n            }).catch(() => { throw new Error('Não foi possível adicionar a negociação') });\n        });\n\n    }\n\n    lista() {\n\n        return ConnectionFactory.getConnection().then((connection) => {\n            new NegociacaoDao(connection).listaTodos();\n        }\n        ).catch(erro => {\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações');\n        });\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection().then(connection => {\n                new NegociacaoDao(connection).apagaTodos().then(() => {\n                    'Negociações apagadas com sucesso';\n                }\n                ).catch(erro => {\n                    console.log(erro);\n                    throw new Error(\"Não foi possível apagar as Negociações\");\n                })\n            });\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente => \n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            })\n    }\n\n}\n"]}